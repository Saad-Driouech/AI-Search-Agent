from search import Node
from search import general_search
from problem import *

val = int(input("Choose on of the following games:\n1- Missionaries and Cannibals\n2. Peg solitaire\n3. 8-puzzle\nEnter your choice: "))
flag = 0
while flag == 0:
    if 1 <= val <= 3:
        flag = 1
        if val == 1:
            print("The state of the Missionaries and cannibals problem are represented using a list that has 3 cells.")
            print("The first and second values indicated the number of missionaries and cannibals respectively on the "
                  "right side and the last value indicates where the boat is (1 if it is on the right side, else 0).")
            print("Please input the number of missionaries and the number of cannibals on the right side and a value to"
                  "represent where the boat is on the initial state:")
            initial_state = [int(item) for item in input("Enter the numbers seperated by space: ").split()]
            print("Please input the number of missionaries and the number of cannibals on the right side and a value to"
                  "represent where the boat is on the goal state:")
            goal_state = [int(item) for item in input("Enter the numbers seperated by space: ").split()]
            problem = ProblemMissionaries(initial_state, goal_state)
        elif val == 2:
            print("The state of Peg Solitaire is represented using a list that has 49 cells. Each cell can be one of the"
                  "following 3 values: 0 1 and 2. 0 means that there is no peg and the corresponding location "
                  "corresponds to a location on the board. 1 means that there is a peg on that location. 2 means that "
                  "the corresponding location is not the part of board")
            print("Please input the values of the initial state. Make sure to enter 49 values!")
            initial_state = [int(item) for item in input("Enter the numbers seperated by space: ").split()]
            print("Please input the values of the goal state. Make sure to enter 49 values!")
            goal_state = [int(item) for item in input("Enter the numbers seperated by space: ").split()]
            problem = PegProblem(initial_state, goal_state)
        elif val == 3:
            print("The state of 8-Puzzle is represented using a list that has 9 cells. Each cell contains the number of"
                  "the tile. To refer to the blank tile we use the number 0.")
            print("Please input the values of the initial state. Make sure to enter 9 values!")
            initial_state = [int(item) for item in input("Enter the numbers seperated by space: ").split()]
            print("Please input the values of the goal state. Make sure to enter 9 values!")
            goal_state = [int(item) for item in input("Enter the numbers seperated by space: ").split()]
            problem = Eight_PuzzleProblem(initial_state, goal_state)
    else:
            print("Please make sure you provide a valid choice for your game")
            val = int(input("Try again choosing a game: "))

print("Please choose one of the following strategies (your choice must be the corresponding number in the menu below: ")
val = int(input("1. Breadth-First search\n2. Depth-First search\n3. Greedy Best-First search\n4. A* search\nEnter your choice: "))
flag = 0
while flag == 0:
    if 1 <= val <= 4:
        flag = 1
        node1 = general_search(problem, val)
        if node1:
            print("Goal has been achieved")
            print(node1.state)
            print("The path cost is:")
            print(node1.path_cost)
            solution = Node.print_solution(node1)
            print("The solution path is:")
            for node in solution:
                if node.action:
                    print(node.state, "which was generated by this action:", node.action)
                else:
                    print(node.state)
        else:
            print("Search has failed")
    else:
        print("Please make sure you provide a valid choice for your search strategy")
        val = int(input("Try again choosing a strategy: "))
